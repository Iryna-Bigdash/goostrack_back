{
    "openapi": "3.0.1",
    "info": {
        "version": "2.0.3",
        "title": "Goose Calendar - OpenAPI 3.0",
        "description": "This is a Goose Calendar Server based on the OpenAPI 3.0 specification.<p>The project is a web application for efficient time planning.It includes the ability to register users, authenticate and authorize them. Additionally, users can create and track their tasks according to date and time, view own statistics and categorize task by priority and progress status.The application features a user-friendly and intuitive interface that facilitates easy and quick execution of all necessary actions. Furthermore, the project ensures user security through password encryption and token-based identification.</p><p><strong>Technology Stack Used in the Project:</strong></p><p>Node.js - JavaScript runtime environment on the server.</p><p>Express.js - framework for web application development on Node.js.</p><p>MongoDB - NoSQL database</p>",
        "contact": {
            "email": "imbigdash@gmail.com"
        }
    },
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "servers": [
        {
            "url": "https://goostrack-backend.onrender.com"
        },
        {
            "url": "http://localhost:8000"
        }
    ],
    "tags": [
        {
            "name": "Auth",
            "description": "Authorization endpoints"
        },
        {
            "name": "Users",
            "description": "Users endpoints"
        },
        {
            "name": "Tasks",
            "description": "Tasks endpoints"
        },
        {
            "name": "Reviews",
            "description": "Reviews endpoints"
        }
    ],
    "paths": {
        "auth/register": {
            "post": {
                "tags": [
                    "Auth"
                ],
                "summary": "Auth new user",
                "parameters": [],
                "requestBody": {
                    "description": "<p><strong>username</strong> - string, Username must be no more than 16 symbols </p><p><strong>email</strong> - string</p><p><strong>password</strong> - string, Password must contain at least 1 Upper case letter, 1 lower case letter and be longer than 8 symbols,</p>",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserRegister"
                            }
                        }
                    }
                },
                "security": [],
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/registerSchemaResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Missing required FieldName field"
                    },
                    "409":{
                        "description": "Email in use"
                    }
                }
            }
        },
        "auth/login": {
            "post": {
                "tags": [
                    "Auth"
                ],
                "summary": "Login user",
                "parameters": [],
                "security": [],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/loginSchema"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Not found"
                    }
                }
            }
        },
        "/auth/logout": {
            "post": {
                "tags": [
                    "Auth"
                ],
                "summary": "User logout",
                "parameters": [],
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/auth/verify": {
            "post": {
                "tags": [
                    "Auth"
                ],
                "summary": "User verification",
                "parameters": [],
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/verificationSchema"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/verify/:verificationToken": {
            "post": {
                "tags": [
                    "Auth"
                ],
                "summary": "Confirmation of verification",
                "parameters": [],
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/users/current": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Get current user info",
                "parameters": [],
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CurrentUserResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized (provide valid token)",
                        "content": {}
                    }
                }
            }
        },
        "/users/edit": {
            "patch": {
                "tags": [
                    "Users"
                ],
                "summary": "User update info",
                "parameters": [],
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "requestBody": {
                    "description": "UserUpdate's object",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateUserRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateUserResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "content": {}
                    }
                }
            }
        },
        "/edit/avatar": {
            "patch": {
                "tags": [
                    "Users"
                ],
                "summary": "User update avatar",
                "parameters": [],
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "requestBody": {
                    "description": "UserUpdate's avatar object",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateAvatarRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateAvatarRequest"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "content": {}
                    }
                }
            }
        },
        "/tasks": {
            "get": {
                "tags": [
                    "Tasks"
                ],
                "summary": "Get all tasks",
                "parameters": [
                    {
                        "in": "query",
                        "name": "day",
                        "required": false,
                        "type": "string",
                        "description": "The date on which to return the tasks. Format: YYYY-MM-DD"
                    },
                    {
                        "in": "query",
                        "name": "month",
                        "required": false,
                        "type": "string",
                        "description": "Any date of the month for which tasks must be returned. Format: YYYY-MM-DD"
                    }
                ],
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetTasksResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Unable to fetch Tasks",
                        "content": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {}
                    }
                }
            },
            "post": {
                "tags": [
                    "Tasks"
                ],
                "summary": "Create task",
                "parameters": [],
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "requestBody": {
                    "description": "Tasks's object",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateTaskRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateTaskResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Unable to save in DataBase",
                        "content": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {}
                    }
                }
            }
        },
        "/tasks/{id}": {
            "patch": {
                "tags": [
                    "Tasks"
                ],
                "summary": "Change tasks",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string",
                        "description": "Task id"
                    }
                ],
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "requestBody": {
                    "description": "Tasks's object",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateTaskRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetDeletePatchTaskResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Unable to find Task",
                        "content": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {}
                    }
                }
            },
            "delete": {
                "tags": [
                    "Tasks"
                ],
                "summary": "Delete task",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string",
                        "description": "Task id"
                    }
                ],
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetDeletePatchTaskResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Unable to find Task",
                        "content": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {}
                    }
                }
            }
        },
        "/reviews": {
            "get": {
                "tags": [
                    "Reviews"
                ],
                "summary": "Get all users' reviews",
                "parameters": [
                    {
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "type": "integer",
                        "description": "Number page"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "type": "integer",
                        "description": "Count reviews in response"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetAllReviewsResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Not found",
                        "content": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {}
                    }
                }
            }
        },
        "/reviews/own": {
            "get": {
                "tags": [
                    "Reviews"
                ],
                "summary": "Get user review",
                "parameters": [
                    {
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "type": "integer",
                        "description": "Number page"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "type": "integer",
                        "description": "Count reviews in response"
                    }
                ],
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetAllReviewsResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {}
                    }
                }
            },
            "post": {
                "tags": [
                    "Reviews"
                ],
                "summary": "Create review",
                "parameters": {},
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "requestBody": {
                    "description": "Tasks's object",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateReviewRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ReviewResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {}
                    }
                }
            },
            "patch": {
                "tags": [
                    "Reviews"
                ],
                "summary": "Review task",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string",
                        "description": "Review id"
                    }
                ],
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateReviewResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {}
                    }
                }
            },
            "delete": {
                "tags": [
                    "Reviews"
                ],
                "summary": "Review task",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "type": "string",
                        "description": "Review id"
                    }
                ],
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeleteReviewResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Unable to find Review",
                        "content": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {}
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "securitySchemes": {
                "Bearer": {
                    "type": "http",
                    "scheme": "bearer",
                    "bearerFormat": "JWT"
                }
            },
                "UserRegister": {
                  "type": "object",
                  "properties": {
                    "username": {
                      "type": "string",
                      "description": "Username",
                      "example": "Iryna Dev"

                    },
                    "email": {
                      "type": "string",
                      "example": "iryna@gmail.com"
                    },
                    "password": {
                      "type": "string",
                      "example": "Iryna1234567$"
                    }
                  },
                  "required": ["username", "email", "password"]
                },
                "registerSchemaResponse":{
                    "type": "object",
                    "example": "Please verify your email"
                }
              }
        }
    }
